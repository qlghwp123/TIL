1.
인스턴스, 클래스 간 이름 공간(namespace)
- 클래스를 정의하면 클래스에 해당하는 이름 공간 생성
- 인스턴스 만들면 인스턴스 객체 생성 및 이름 공간 생성
- 인스턴스에서 특정 속성에 접근하면, 인스턴스 - 클래스 순으로 탐색

2.
파이썬에는 클래스 메소드라는게 따로 있다.
클래스가 사용할 메소드를 의미하며 데코레이터 '@classmethod' 를 함수 정의 위에 붙여서 사용.
데코레이터는 함수를 어떤 함수로 꾸며서 새로운 기능을 부여한다.
첫 번째 인자로 클래스(cls) 가 전달된다. 정의할 때도 첫 번째 인자는 cls 이다.
한 메소드 내부 클래스 자체가 필요할 때 사용된다.

3. 
스태틱 메소드
인스턴스 변수, 클래스 변수를 전혀 다루지 않는 메소드이다. 즉 객체 상태나 클래스 상태 수정 불가.
속성을 다루지 않고 기능만 있는 메소드를 정의할 때 사용된다.
이 역시 함수 정의 위에 데코레이터 '@staticmethod' 를 사용하여 정의한다.
호출 시 어떤 인자도 전달되지 않는다.
클래스, 인스턴스 모두 필요 없을 때 사용된다.
일반 함수처럼 동작하지만 클래스의 이름 공간에 귀속된다.

4. 
파이썬에서 상속은
def class(부모클래스) 의 형식으로 이루어진다.

5.
상속 관련 함수
isinstance(object, classinfo)
object 가 classinfo 의 instance or subclass 인 경우 True
issubclass(class, classinfo)
class 가 classinfo 의 subclass 인 경우 True

6.
상위 클래스를 사용하려고 하는 경우 super() 키워드를 사용
ex) 상위 클래스 생성자 호출
super().__init__(...)

7. 
모든 클래스는 object 로 부터 상속됨. 자바랑 같다.
상속 관계에서 이름 공간은 인스턴스, 하위 클래스, 상위 클래스 순으로 탐색한다.

8. 
파이썬은 다중 상속 지원
중복된 속성과 메소드는 상속 순서에 의해 결정된다.

9.
파이썬 메소드 오버라이딩은 
java 처럼 어노테이션을 추가할 필요 없이 그냥 이름, 인자만 같게 해서 재정의하면 된다.

10.
파이썬은 접근제어자가 존재하지만 실제로 모든 접근을 막지 않는다.
언더바 2개 : private
언더바 1개 : protected
언더바 X : public